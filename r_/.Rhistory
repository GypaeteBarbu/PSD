K=round(t(Conj(phi))%*%phi,7)
list_data=list(K,mat_spectre)
names(list_data)=c("K","spectre")
return(list_data)
}
else{
list_data=list(phi,mat_spectre)
names(list_data)=c("phi","spectre")
return(list_data)
}
}
#Exemples
omega=matrix(1,4,10)
omega[,10]=matrix(0.5,4,1)
m_pi=c()
for (k in 1:10){
m_pi[k]=6*(11-k)/110
}
K=fickus(omega,M=4,pi=m_pi)
print(K)
#' pgd
#'
#' @description \code{pgd} constructs a real projection matrix, kernels of fixed size sampling designs with first order inclusion probabilities given by \code{Pi}.
#'
#' @param Pi a vector of first order inclusion probabilities weights.
#' @param K a logical indicating which model of matrix should be returned. See 'Details.'
#'
#' @details It is common in practice to work with fixed size sampling designs with prescribed first order inclusion probabilities. Constructing such a determinantal sampling design is equivalent to constructing a projection matrix with a prescribed diagonal. \code{pgd} constructs this matrix.
#'
#' @details As \code{Pi} is a vector of first order inclusion probabilities, it should be of length N, the number of elements \code{N} the set and should contain only values between 0 and 1 excluded such that the sum of these values is \code{n}, the number of elements to be sampled.
#'
#' @return For \code{K = TRUE}, the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#' @return For \code{K = FALSE}, the matrix \code{V} such that \code{VV*} is the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#'
#' @importFrom rlang abort
#'
#' @export
#'
#' @references LOONIS, V. and MARY, X. Determinantal sampling designs. Journal of Statistical Planning and Inference, 2019, vol. 199, p. 60-88.
#'
#' @examples
#' pgd(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8))
#' pgd(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8), TRUE)
#' pgd(rep(36/200, 200))
#'
#' @seealso \link{dsd_sampling} and \link{detSampling}
#'
pgd <- function(Pi, K = FALSE) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
if (as.integer(round( sum(Pi) , 9)) - round( sum(Pi) , 9) != 0) {
rlang::abort("The sum of the first order inclusion probabilities should be an integer")
}
s <- c()
c <- c()
kr <- c()
alpha <-c()
sum <-0
r<-1
r_prev<-0
for (k in 1:N) {
prev_sum<-sum
sum<-sum+Pi[k]
if (sum>=r)
{
kr[r] <- k
alpha[k] <-r-prev_sum
int <- sqrt( (1 - Pi[k]) / (1 - alpha[k]) )
s[k] <- round(int, 8)
r_prev<-r
r<-r+1
}
else {
inter <- sqrt( Pi[k] / (r_prev + 1 - prev_sum) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
V <- matrix(0, nrow = N , ncol = r_prev)
V[1, 1] = 1
if ((r_prev-1) != 0) {
for (r in 1:(r_prev-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
pgd(c(1/2,3/4,3/4,1/5,2/5,3/5,4/5),TRUE)
source("pgd.R")
Cuta<-function(Pi,w=1/Pi,X,R,K=pgd(Pi,TRUE)){
C<-C(K,X,w)
N<- length(Pi)
for(r in 1:R){
K_prev=K
for (k in 1:(N-1)){
flag=0
for (l in (k+1):N){
dif<- K[k,k]-K[l,l]
if (dif!=0){
t<-2*Re(K[k,l])/dif
cosinus<- 1/sqrt(1+t^2)
sinus<- t*cosinus
W<- diag(N)
W[k,k]<- cosinus
W[l,l]<- cosinus
W[k,l]<- sinus
W[l,k]<- -sinus
K_next=W%*%K%*%t(W)
new_C=C(K_next,X,w)
if (new_C<C){
K=K_next
C=new_C
}
}
else{
flag=flag+1
}
}
if(flag==N-k){
break
}
}
if(identical(K_prev,K)){
break
}
}
return(K)
}
C <-function(K,X,w){
Q<- ncol(X)
I<- diag(nrow(K))
result<-0
Pi=diag(K)
if(prod(w==1/Pi)==1){
for (k in 1:Q){
z<- round(X[,k]*w,7)
result<- result+round((t(z)%*%((I-K)*Conj(K))%*%z),7)+round(sum((K*I)%*%z-X[,k])^2,7)
print("dam")
}
}
else{
for (k in 1:Q){
z<- round(X[,k]*w,7)
result<- result+round((t(z)%*%((I-K)*Conj(K))%*%z),7)
}
}
return (result)
}
Cuta(Pi=c(1/2,3/4,3/4,1/5,2/5,3/5,4/5),X=diag(7),R=5)
source("mypgd.R")
source("pgd.R")
omega=matrix(0.5,8,10)
rho=matrix(0.25,8,9)
m_pi=c()
for (k in 1:10){
m_pi[k]=6*(11-k)/110
}
fic=fickus(omega,rho,M=8,pi=m_pi)
Rfickus(fic$K)
source("fickus.R")
cnorm<-function(x){
return(sqrt(sum(Re(t(Conj(x))%*%x))))
}
Rfickus<-function(K){
n=Re(sum(diag(K)))
pi_up=Re(diag(K)[order(diag(K))])
Pi=Re(diag(K)[order(diag(K), decreasing = TRUE)])
N=length(Pi)
spectre=eigen(K)$values
M=match(0,round(spectre,1))-1
if(is.na(M)){
M=N
}
psi=Conj(t(eigen(K)$vectors))[1:M,]
U=matrix(psi[,1]/Pi[1])
Y=matrix(runif(M*(M-1),0,1000),M,M-1)
U_chap=matrix(0,M,M)
omega=matrix(0,M,N)
rho=matrix(0,M,N-1)
for (j in 2:M){
vect=(diag(M)-U%*%diag(1/diag(t(Conj(U))%*%U),j-1)%*%t(Conj(U)))%*%Y[,j-1]
U=cbind(U,vect)
}
U=t(t(U)/sqrt(Re(colSums(Conj(U)*U))))
lambda1=matrix(0,M,1)
lambda1[M]=K[1,1]
mat_spectre=lambda1
for (k in 2:N){
U_chap=matrix(0,M,M)
mat=psi[,1:(k-1)]%*%t(Conj(psi[,1:(k-1)]))
vp=eigen(mat)$vect
spectre=rev(lambda1)
lambda2=lambda1
occ=tabulate(match(spectre,unique(spectre)))
spectre=unique(spectre)
r=length(spectre)
pos=1
vect=matrix(rnorm(M),M,1)
for (i in  1:r){
prev_pos=pos
pos=pos+occ[i]
P=vp[,prev_pos:(pos-1)]
Z=(P%*%t(Conj(P)))%*%psi[,k]
if(prod(round(Z,7)==0)==1){
Z=(P%*%t(Conj(P)))%*%matrix(rnorm(M),M,1)
}
U_chap[,prev_pos]=Z/cnorm(Z)
if(occ[i]>1){
if(pos<=M){
X=cbind(U_chap[,0:(prev_pos-1)],U[,pos:M])
}
else{
X=U_chap[,0:(prev_pos-1)]
}
for (j in 1:(occ[i]-1)){
X=cbind(U_chap[,(prev_pos+j-1)],X)
U_chap[,prev_pos+j]=(diag(M)-X%*%solve(t(Conj(X))%*%X)%*%t(Conj(X)))%*%matrix(rnorm(M),M,1)
U_chap[,prev_pos+j]=U_chap[,prev_pos+j]/cnorm(U_chap[,prev_pos+j])
}
}
}
lambda1=matrix(0,M,1)
lambda1[1:min(k,M)]=eigen(K[1:k,1:k])$value[1:min(k,M)]
lambda1=round(rev(lambda1),7)
mat_spectre=cbind(mat_spectre,lambda1)
ens=1:M
E1=ens
E2=ens
for (j in ens){
if(lambda2[j] %in% lambda1[E1]){
E2=E2[((E2)!=j)]
E1=E1[-match(lambda2[j],lambda1[E1])]
}
}
E1_=M+1-E1
E2_=M+1-E2
r=length(E1)
E1_c=c()
E2_c=c()
if (r!=M){
E1_c=ens[!ens %in% E1_]
E2_c=ens[!ens %in% E2_]
E1_=c(E1_[order(E1_)],E1_c[order(E1_c)])
E2_=c(E2_[order(E2_)],E2_c[order(E2_c)])
sigma1=diag(M)[E1_,]
sigma2=diag(M)[E2_,]
}
else{
sigma1=diag(M)
sigma2=diag(M)
}
R=diag(r)[r:1,]%*%cbind(lambda2[E2],lambda1[E1])
v=c()
w=c()
for (i in 1:r){
v_1=R[i,1]-R[,2]
v_2=R[i,1]-R[,1]
v_2[i]=1
v_1=v_1[order(abs(v_1))]
v_2=v_2[order(abs(v_2))]
v[i]=round(sqrt(-prod(v_1/v_2)),7)
w_1=R[i,2]-R[,1]
w_2=R[i,2]-R[,2]
w_2[i]=1
w_1=w_1[order(abs(w_1))]
w_2=w_2[order(abs(w_2))]
w[i]=round(sqrt(prod(w_1/w_2)),7)
}
W=(1/(t(matrix(R[,2],r,r))-matrix(R[,1],r,r)))*(v%*%t(w))
mat1=cbind(W,matrix(0,r,M-r))
mat2=cbind(matrix(0,M-r,r),diag(M-r))
V=t(Conj(U))%*%U_chap
rho[,k-1]=atan(Im(diag(V))/Re(diag(V)))
U=U%*%V%*%t(sigma2)%*%rbind(mat1,mat2)%*%sigma1
}
mat_spectre=Re(mat_spectre)
spectre=rev(mat_spectre[,N])
cumsum_1=0
lambda=1
for(j in 1:M){
A=0
B=min(lambda,n-cumsum_1)
if(M>j){
for(i in 1:(M-j)){
A=max(A,sum(Pi[1:(i+j-1)],-cumsum_1)/i)
}
}
A=max(A,(n-cumsum_1)/(M-j+1))
if(round(A-B,7)!=0){
omega[j,N]=(spectre[j]-A)/(B-A)
}
lambda=spectre[j]
cumsum_1=cumsum_1+spectre[j]
}
for (k in (N-1):1){
start=max(1,M-k+1)
lambda1=mat_spectre[,k+1]
lambda2=mat_spectre[,k]
for(j in start:M){
A=max(0,lambda1[j-1],sum(lambda1[1:j])-sum(lambda2[0:(j-1)])-Pi[k+1])
B_1=c()
ind=0
for (i in j:M){
ind=ind+1
prem=0
deux=0
trois=lambda2[0:(j-1)]
if ((M-i+1)<=k){
prem=Pi[(M-i+1):k]
}
if (j<=(i-1)){
deux=lambda1[j:(i-1)]
}
B_1[ind]=sum(prem,-deux,-trois)
}
B=min(lambda1[j],min(B_1 ))
if(round(A-B,7)!=0){
omega[j,k]=(mat_spectre[j,k]-A)/(B-A)
}
}
}
omega=round(omega,7)
rho=round(rho/3.141593,7)
list_data=list(omega,rho,mat_spectre)
names(list_data)=c("omega","rho","spectre")
return(list_data)
}
omega=matrix(0.5,8,10)
rho=matrix(0.25,8,9)
m_pi=c()
for (k in 1:10){
m_pi[k]=6*(11-k)/110
}
fic=fickus(omega,rho,M=8,pi=m_pi)
Rfickus(fic$K)
omega=matrix(0.5,7,10)
rho=matrix(0.25,7,9)
m_pi=c()
for (k in 1:10){
m_pi[k]=6*(11-k)/110
}
fic=fickus(omega,rho,M=7,pi=m_pi)
Rfickus(fic$K)
#' pgd
#'
#' @description \code{pgd} constructs a real projection matrix, kernels of fixed size sampling designs with first order inclusion probabilities given by \code{Pi}.
#'
#' @param Pi a vector of first order inclusion probabilities weights.
#' @param K a logical indicating which model of matrix should be returned. See 'Details.'
#'
#' @details It is common in practice to work with fixed size sampling designs with prescribed first order inclusion probabilities. Constructing such a determinantal sampling design is equivalent to constructing a projection matrix with a prescribed diagonal. \code{pgd} constructs this matrix.
#'
#' @details As \code{Pi} is a vector of first order inclusion probabilities, it should be of length N, the number of elements \code{N} the set and should contain only values between 0 and 1 excluded such that the sum of these values is \code{n}, the number of elements to be sampled.
#'
#' @return For \code{K = TRUE}, the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#' @return For \code{K = FALSE}, the matrix \code{V} such that \code{VV*} is the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#'
#' @importFrom rlang abort
#'
#' @export
#'
#' @references LOONIS, V. and MARY, X. Determinantal sampling designs. Journal of Statistical Planning and Inference, 2019, vol. 199, p. 60-88.
#'
#' @examples
#' pgd(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8))
#' pgd(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8), TRUE)
#' pgd(rep(36/200, 200))
#'
#' @seealso \link{dsd_sampling} and \link{detSampling}
#'
pgd <- function(Pi, K = FALSE) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
if (as.integer(round( sum(Pi) , 9)) - round( sum(Pi) , 9) != 0) {
rlang::abort("The sum of the first order inclusion probabilities should be an integer")
}
s <- c()
c <- c()
kr <- c()
alpha <-c()
sum <-0
r<-1
r_prev<-0
for (k in 1:N) {
prev_sum<-sum
sum<-sum+Pi[k]
if (sum>=r)
{
kr[r] <- k
alpha[k] <-r-prev_sum
int <- sqrt( (1 - Pi[k]) / (1 - alpha[k]) )
s[k] <- round(int, 8)
r_prev<-r
r<-r+1
}
else {
inter <- sqrt( Pi[k] / (r_prev + 1 - prev_sum) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
V <- matrix(0, nrow = N , ncol = r_prev)
V[1, 1] = 1
if ((r_prev-1) != 0) {
for (r in 1:(r_prev-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
#example
pgd(c(1/2,3/4,3/4,1/5,2/5,3/5,4/5),TRUE)
source("pgd.R")
Cuta<-function(Pi,w=1/Pi,X,R,K=pgd(Pi,TRUE)){
C<-C(K,X,w)
N<- length(Pi)
for(r in 1:R){
K_prev=K
for (k in 1:(N-1)){
flag=0
for (l in (k+1):N){
dif<- K[k,k]-K[l,l]
if (dif!=0){
t<-2*Re(K[k,l])/dif
cosinus<- 1/sqrt(1+t^2)
sinus<- t*cosinus
W<- diag(N)
W[k,k]<- cosinus
W[l,l]<- cosinus
W[k,l]<- sinus
W[l,k]<- -sinus
K_next=W%*%K%*%t(W)
new_C=C(K_next,X,w)
if (new_C<C){
K=K_next
C=new_C
}
}
else{
flag=flag+1
}
}
if(flag==N-k){
break
}
}
if(identical(K_prev,K)){
break
}
}
return(K)
}
C <-function(K,X,w){
Q<- ncol(X)
I<- diag(nrow(K))
result<-0
Pi=diag(K)
if(prod(w==1/Pi)==1){
for (k in 1:Q){
z<- round(X[,k]*w,7)
result<- result+round((t(z)%*%((I-K)*Conj(K))%*%z),7)+round(sum((K*I)%*%z-X[,k])^2,7)
print("dam")
}
}
else{
for (k in 1:Q){
z<- round(X[,k]*w,7)
result<- result+round((t(z)%*%((I-K)*Conj(K))%*%z),7)
}
}
return (result)
}
#example
Cuta(Pi=c(1/2,3/4,3/4,1/5,2/5,3/5,4/5),X=diag(7),R=5)
